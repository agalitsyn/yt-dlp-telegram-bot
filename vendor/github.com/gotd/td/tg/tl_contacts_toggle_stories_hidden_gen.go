// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ContactsToggleStoriesHiddenRequest represents TL type `contacts.toggleStoriesHidden#753fb865`.
//
// See https://core.telegram.org/method/contacts.toggleStoriesHidden for reference.
type ContactsToggleStoriesHiddenRequest struct {
	// ID field of ContactsToggleStoriesHiddenRequest.
	ID InputUserClass
	// Hidden field of ContactsToggleStoriesHiddenRequest.
	Hidden bool
}

// ContactsToggleStoriesHiddenRequestTypeID is TL type id of ContactsToggleStoriesHiddenRequest.
const ContactsToggleStoriesHiddenRequestTypeID = 0x753fb865

// Ensuring interfaces in compile-time for ContactsToggleStoriesHiddenRequest.
var (
	_ bin.Encoder     = &ContactsToggleStoriesHiddenRequest{}
	_ bin.Decoder     = &ContactsToggleStoriesHiddenRequest{}
	_ bin.BareEncoder = &ContactsToggleStoriesHiddenRequest{}
	_ bin.BareDecoder = &ContactsToggleStoriesHiddenRequest{}
)

func (t *ContactsToggleStoriesHiddenRequest) Zero() bool {
	if t == nil {
		return true
	}
	if !(t.ID == nil) {
		return false
	}
	if !(t.Hidden == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (t *ContactsToggleStoriesHiddenRequest) String() string {
	if t == nil {
		return "ContactsToggleStoriesHiddenRequest(nil)"
	}
	type Alias ContactsToggleStoriesHiddenRequest
	return fmt.Sprintf("ContactsToggleStoriesHiddenRequest%+v", Alias(*t))
}

// FillFrom fills ContactsToggleStoriesHiddenRequest from given interface.
func (t *ContactsToggleStoriesHiddenRequest) FillFrom(from interface {
	GetID() (value InputUserClass)
	GetHidden() (value bool)
}) {
	t.ID = from.GetID()
	t.Hidden = from.GetHidden()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ContactsToggleStoriesHiddenRequest) TypeID() uint32 {
	return ContactsToggleStoriesHiddenRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ContactsToggleStoriesHiddenRequest) TypeName() string {
	return "contacts.toggleStoriesHidden"
}

// TypeInfo returns info about TL type.
func (t *ContactsToggleStoriesHiddenRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "contacts.toggleStoriesHidden",
		ID:   ContactsToggleStoriesHiddenRequestTypeID,
	}
	if t == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "Hidden",
			SchemaName: "hidden",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (t *ContactsToggleStoriesHiddenRequest) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode contacts.toggleStoriesHidden#753fb865 as nil")
	}
	b.PutID(ContactsToggleStoriesHiddenRequestTypeID)
	return t.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (t *ContactsToggleStoriesHiddenRequest) EncodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode contacts.toggleStoriesHidden#753fb865 as nil")
	}
	if t.ID == nil {
		return fmt.Errorf("unable to encode contacts.toggleStoriesHidden#753fb865: field id is nil")
	}
	if err := t.ID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode contacts.toggleStoriesHidden#753fb865: field id: %w", err)
	}
	b.PutBool(t.Hidden)
	return nil
}

// Decode implements bin.Decoder.
func (t *ContactsToggleStoriesHiddenRequest) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode contacts.toggleStoriesHidden#753fb865 to nil")
	}
	if err := b.ConsumeID(ContactsToggleStoriesHiddenRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode contacts.toggleStoriesHidden#753fb865: %w", err)
	}
	return t.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (t *ContactsToggleStoriesHiddenRequest) DecodeBare(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode contacts.toggleStoriesHidden#753fb865 to nil")
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode contacts.toggleStoriesHidden#753fb865: field id: %w", err)
		}
		t.ID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode contacts.toggleStoriesHidden#753fb865: field hidden: %w", err)
		}
		t.Hidden = value
	}
	return nil
}

// GetID returns value of ID field.
func (t *ContactsToggleStoriesHiddenRequest) GetID() (value InputUserClass) {
	if t == nil {
		return
	}
	return t.ID
}

// GetHidden returns value of Hidden field.
func (t *ContactsToggleStoriesHiddenRequest) GetHidden() (value bool) {
	if t == nil {
		return
	}
	return t.Hidden
}

// ContactsToggleStoriesHidden invokes method contacts.toggleStoriesHidden#753fb865 returning error if any.
//
// See https://core.telegram.org/method/contacts.toggleStoriesHidden for reference.
func (c *Client) ContactsToggleStoriesHidden(ctx context.Context, request *ContactsToggleStoriesHiddenRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
