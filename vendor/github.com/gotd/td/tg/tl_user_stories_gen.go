// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// UserStories represents TL type `userStories#8611a200`.
//
// See https://core.telegram.org/constructor/userStories for reference.
type UserStories struct {
	// Flags field of UserStories.
	Flags bin.Fields
	// UserID field of UserStories.
	UserID int64
	// MaxReadID field of UserStories.
	//
	// Use SetMaxReadID and GetMaxReadID helpers.
	MaxReadID int
	// Stories field of UserStories.
	Stories []StoryItemClass
}

// UserStoriesTypeID is TL type id of UserStories.
const UserStoriesTypeID = 0x8611a200

// Ensuring interfaces in compile-time for UserStories.
var (
	_ bin.Encoder     = &UserStories{}
	_ bin.Decoder     = &UserStories{}
	_ bin.BareEncoder = &UserStories{}
	_ bin.BareDecoder = &UserStories{}
)

func (u *UserStories) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Flags.Zero()) {
		return false
	}
	if !(u.UserID == 0) {
		return false
	}
	if !(u.MaxReadID == 0) {
		return false
	}
	if !(u.Stories == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *UserStories) String() string {
	if u == nil {
		return "UserStories(nil)"
	}
	type Alias UserStories
	return fmt.Sprintf("UserStories%+v", Alias(*u))
}

// FillFrom fills UserStories from given interface.
func (u *UserStories) FillFrom(from interface {
	GetUserID() (value int64)
	GetMaxReadID() (value int, ok bool)
	GetStories() (value []StoryItemClass)
}) {
	u.UserID = from.GetUserID()
	if val, ok := from.GetMaxReadID(); ok {
		u.MaxReadID = val
	}

	u.Stories = from.GetStories()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*UserStories) TypeID() uint32 {
	return UserStoriesTypeID
}

// TypeName returns name of type in TL schema.
func (*UserStories) TypeName() string {
	return "userStories"
}

// TypeInfo returns info about TL type.
func (u *UserStories) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "userStories",
		ID:   UserStoriesTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "MaxReadID",
			SchemaName: "max_read_id",
			Null:       !u.Flags.Has(0),
		},
		{
			Name:       "Stories",
			SchemaName: "stories",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (u *UserStories) SetFlags() {
	if !(u.MaxReadID == 0) {
		u.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (u *UserStories) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userStories#8611a200 as nil")
	}
	b.PutID(UserStoriesTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *UserStories) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userStories#8611a200 as nil")
	}
	u.SetFlags()
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode userStories#8611a200: field flags: %w", err)
	}
	b.PutLong(u.UserID)
	if u.Flags.Has(0) {
		b.PutInt(u.MaxReadID)
	}
	b.PutVectorHeader(len(u.Stories))
	for idx, v := range u.Stories {
		if v == nil {
			return fmt.Errorf("unable to encode userStories#8611a200: field stories element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode userStories#8611a200: field stories element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UserStories) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userStories#8611a200 to nil")
	}
	if err := b.ConsumeID(UserStoriesTypeID); err != nil {
		return fmt.Errorf("unable to decode userStories#8611a200: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *UserStories) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userStories#8611a200 to nil")
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode userStories#8611a200: field flags: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode userStories#8611a200: field user_id: %w", err)
		}
		u.UserID = value
	}
	if u.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode userStories#8611a200: field max_read_id: %w", err)
		}
		u.MaxReadID = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode userStories#8611a200: field stories: %w", err)
		}

		if headerLen > 0 {
			u.Stories = make([]StoryItemClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeStoryItem(b)
			if err != nil {
				return fmt.Errorf("unable to decode userStories#8611a200: field stories: %w", err)
			}
			u.Stories = append(u.Stories, value)
		}
	}
	return nil
}

// GetUserID returns value of UserID field.
func (u *UserStories) GetUserID() (value int64) {
	if u == nil {
		return
	}
	return u.UserID
}

// SetMaxReadID sets value of MaxReadID conditional field.
func (u *UserStories) SetMaxReadID(value int) {
	u.Flags.Set(0)
	u.MaxReadID = value
}

// GetMaxReadID returns value of MaxReadID conditional field and
// boolean which is true if field was set.
func (u *UserStories) GetMaxReadID() (value int, ok bool) {
	if u == nil {
		return
	}
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.MaxReadID, true
}

// GetStories returns value of Stories field.
func (u *UserStories) GetStories() (value []StoryItemClass) {
	if u == nil {
		return
	}
	return u.Stories
}

// MapStories returns field Stories wrapped in StoryItemClassArray helper.
func (u *UserStories) MapStories() (value StoryItemClassArray) {
	return StoryItemClassArray(u.Stories)
}
