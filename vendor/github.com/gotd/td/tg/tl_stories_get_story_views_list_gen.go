// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoriesGetStoryViewsListRequest represents TL type `stories.getStoryViewsList#4b3b5e97`.
//
// See https://core.telegram.org/method/stories.getStoryViewsList for reference.
type StoriesGetStoryViewsListRequest struct {
	// ID field of StoriesGetStoryViewsListRequest.
	ID int
	// OffsetDate field of StoriesGetStoryViewsListRequest.
	OffsetDate int
	// OffsetID field of StoriesGetStoryViewsListRequest.
	OffsetID int64
	// Limit field of StoriesGetStoryViewsListRequest.
	Limit int
}

// StoriesGetStoryViewsListRequestTypeID is TL type id of StoriesGetStoryViewsListRequest.
const StoriesGetStoryViewsListRequestTypeID = 0x4b3b5e97

// Ensuring interfaces in compile-time for StoriesGetStoryViewsListRequest.
var (
	_ bin.Encoder     = &StoriesGetStoryViewsListRequest{}
	_ bin.Decoder     = &StoriesGetStoryViewsListRequest{}
	_ bin.BareEncoder = &StoriesGetStoryViewsListRequest{}
	_ bin.BareDecoder = &StoriesGetStoryViewsListRequest{}
)

func (g *StoriesGetStoryViewsListRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.ID == 0) {
		return false
	}
	if !(g.OffsetDate == 0) {
		return false
	}
	if !(g.OffsetID == 0) {
		return false
	}
	if !(g.Limit == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *StoriesGetStoryViewsListRequest) String() string {
	if g == nil {
		return "StoriesGetStoryViewsListRequest(nil)"
	}
	type Alias StoriesGetStoryViewsListRequest
	return fmt.Sprintf("StoriesGetStoryViewsListRequest%+v", Alias(*g))
}

// FillFrom fills StoriesGetStoryViewsListRequest from given interface.
func (g *StoriesGetStoryViewsListRequest) FillFrom(from interface {
	GetID() (value int)
	GetOffsetDate() (value int)
	GetOffsetID() (value int64)
	GetLimit() (value int)
}) {
	g.ID = from.GetID()
	g.OffsetDate = from.GetOffsetDate()
	g.OffsetID = from.GetOffsetID()
	g.Limit = from.GetLimit()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoriesGetStoryViewsListRequest) TypeID() uint32 {
	return StoriesGetStoryViewsListRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*StoriesGetStoryViewsListRequest) TypeName() string {
	return "stories.getStoryViewsList"
}

// TypeInfo returns info about TL type.
func (g *StoriesGetStoryViewsListRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stories.getStoryViewsList",
		ID:   StoriesGetStoryViewsListRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "OffsetDate",
			SchemaName: "offset_date",
		},
		{
			Name:       "OffsetID",
			SchemaName: "offset_id",
		},
		{
			Name:       "Limit",
			SchemaName: "limit",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *StoriesGetStoryViewsListRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode stories.getStoryViewsList#4b3b5e97 as nil")
	}
	b.PutID(StoriesGetStoryViewsListRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *StoriesGetStoryViewsListRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode stories.getStoryViewsList#4b3b5e97 as nil")
	}
	b.PutInt(g.ID)
	b.PutInt(g.OffsetDate)
	b.PutLong(g.OffsetID)
	b.PutInt(g.Limit)
	return nil
}

// Decode implements bin.Decoder.
func (g *StoriesGetStoryViewsListRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode stories.getStoryViewsList#4b3b5e97 to nil")
	}
	if err := b.ConsumeID(StoriesGetStoryViewsListRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode stories.getStoryViewsList#4b3b5e97: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *StoriesGetStoryViewsListRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode stories.getStoryViewsList#4b3b5e97 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.getStoryViewsList#4b3b5e97: field id: %w", err)
		}
		g.ID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.getStoryViewsList#4b3b5e97: field offset_date: %w", err)
		}
		g.OffsetDate = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode stories.getStoryViewsList#4b3b5e97: field offset_id: %w", err)
		}
		g.OffsetID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.getStoryViewsList#4b3b5e97: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// GetID returns value of ID field.
func (g *StoriesGetStoryViewsListRequest) GetID() (value int) {
	if g == nil {
		return
	}
	return g.ID
}

// GetOffsetDate returns value of OffsetDate field.
func (g *StoriesGetStoryViewsListRequest) GetOffsetDate() (value int) {
	if g == nil {
		return
	}
	return g.OffsetDate
}

// GetOffsetID returns value of OffsetID field.
func (g *StoriesGetStoryViewsListRequest) GetOffsetID() (value int64) {
	if g == nil {
		return
	}
	return g.OffsetID
}

// GetLimit returns value of Limit field.
func (g *StoriesGetStoryViewsListRequest) GetLimit() (value int) {
	if g == nil {
		return
	}
	return g.Limit
}

// StoriesGetStoryViewsList invokes method stories.getStoryViewsList#4b3b5e97 returning error if any.
//
// See https://core.telegram.org/method/stories.getStoryViewsList for reference.
func (c *Client) StoriesGetStoryViewsList(ctx context.Context, request *StoriesGetStoryViewsListRequest) (*StoriesStoryViewsList, error) {
	var result StoriesStoryViewsList

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
