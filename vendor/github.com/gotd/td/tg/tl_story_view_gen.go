// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoryView represents TL type `storyView#a71aacc2`.
//
// See https://core.telegram.org/constructor/storyView for reference.
type StoryView struct {
	// UserID field of StoryView.
	UserID int64
	// Date field of StoryView.
	Date int
}

// StoryViewTypeID is TL type id of StoryView.
const StoryViewTypeID = 0xa71aacc2

// Ensuring interfaces in compile-time for StoryView.
var (
	_ bin.Encoder     = &StoryView{}
	_ bin.Decoder     = &StoryView{}
	_ bin.BareEncoder = &StoryView{}
	_ bin.BareDecoder = &StoryView{}
)

func (s *StoryView) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.UserID == 0) {
		return false
	}
	if !(s.Date == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StoryView) String() string {
	if s == nil {
		return "StoryView(nil)"
	}
	type Alias StoryView
	return fmt.Sprintf("StoryView%+v", Alias(*s))
}

// FillFrom fills StoryView from given interface.
func (s *StoryView) FillFrom(from interface {
	GetUserID() (value int64)
	GetDate() (value int)
}) {
	s.UserID = from.GetUserID()
	s.Date = from.GetDate()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoryView) TypeID() uint32 {
	return StoryViewTypeID
}

// TypeName returns name of type in TL schema.
func (*StoryView) TypeName() string {
	return "storyView"
}

// TypeInfo returns info about TL type.
func (s *StoryView) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "storyView",
		ID:   StoryViewTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StoryView) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyView#a71aacc2 as nil")
	}
	b.PutID(StoryViewTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StoryView) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyView#a71aacc2 as nil")
	}
	b.PutLong(s.UserID)
	b.PutInt(s.Date)
	return nil
}

// Decode implements bin.Decoder.
func (s *StoryView) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyView#a71aacc2 to nil")
	}
	if err := b.ConsumeID(StoryViewTypeID); err != nil {
		return fmt.Errorf("unable to decode storyView#a71aacc2: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StoryView) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyView#a71aacc2 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode storyView#a71aacc2: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode storyView#a71aacc2: field date: %w", err)
		}
		s.Date = value
	}
	return nil
}

// GetUserID returns value of UserID field.
func (s *StoryView) GetUserID() (value int64) {
	if s == nil {
		return
	}
	return s.UserID
}

// GetDate returns value of Date field.
func (s *StoryView) GetDate() (value int) {
	if s == nil {
		return
	}
	return s.Date
}
