// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoriesStoryViewsList represents TL type `stories.storyViewsList#fb3f77ac`.
//
// See https://core.telegram.org/constructor/stories.storyViewsList for reference.
type StoriesStoryViewsList struct {
	// Count field of StoriesStoryViewsList.
	Count int
	// Views field of StoriesStoryViewsList.
	Views []StoryView
	// Users field of StoriesStoryViewsList.
	Users []UserClass
}

// StoriesStoryViewsListTypeID is TL type id of StoriesStoryViewsList.
const StoriesStoryViewsListTypeID = 0xfb3f77ac

// Ensuring interfaces in compile-time for StoriesStoryViewsList.
var (
	_ bin.Encoder     = &StoriesStoryViewsList{}
	_ bin.Decoder     = &StoriesStoryViewsList{}
	_ bin.BareEncoder = &StoriesStoryViewsList{}
	_ bin.BareDecoder = &StoriesStoryViewsList{}
)

func (s *StoriesStoryViewsList) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Count == 0) {
		return false
	}
	if !(s.Views == nil) {
		return false
	}
	if !(s.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StoriesStoryViewsList) String() string {
	if s == nil {
		return "StoriesStoryViewsList(nil)"
	}
	type Alias StoriesStoryViewsList
	return fmt.Sprintf("StoriesStoryViewsList%+v", Alias(*s))
}

// FillFrom fills StoriesStoryViewsList from given interface.
func (s *StoriesStoryViewsList) FillFrom(from interface {
	GetCount() (value int)
	GetViews() (value []StoryView)
	GetUsers() (value []UserClass)
}) {
	s.Count = from.GetCount()
	s.Views = from.GetViews()
	s.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoriesStoryViewsList) TypeID() uint32 {
	return StoriesStoryViewsListTypeID
}

// TypeName returns name of type in TL schema.
func (*StoriesStoryViewsList) TypeName() string {
	return "stories.storyViewsList"
}

// TypeInfo returns info about TL type.
func (s *StoriesStoryViewsList) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stories.storyViewsList",
		ID:   StoriesStoryViewsListTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Count",
			SchemaName: "count",
		},
		{
			Name:       "Views",
			SchemaName: "views",
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StoriesStoryViewsList) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stories.storyViewsList#fb3f77ac as nil")
	}
	b.PutID(StoriesStoryViewsListTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StoriesStoryViewsList) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stories.storyViewsList#fb3f77ac as nil")
	}
	b.PutInt(s.Count)
	b.PutVectorHeader(len(s.Views))
	for idx, v := range s.Views {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode stories.storyViewsList#fb3f77ac: field views element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(s.Users))
	for idx, v := range s.Users {
		if v == nil {
			return fmt.Errorf("unable to encode stories.storyViewsList#fb3f77ac: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode stories.storyViewsList#fb3f77ac: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StoriesStoryViewsList) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stories.storyViewsList#fb3f77ac to nil")
	}
	if err := b.ConsumeID(StoriesStoryViewsListTypeID); err != nil {
		return fmt.Errorf("unable to decode stories.storyViewsList#fb3f77ac: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StoriesStoryViewsList) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stories.storyViewsList#fb3f77ac to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.storyViewsList#fb3f77ac: field count: %w", err)
		}
		s.Count = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode stories.storyViewsList#fb3f77ac: field views: %w", err)
		}

		if headerLen > 0 {
			s.Views = make([]StoryView, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value StoryView
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode stories.storyViewsList#fb3f77ac: field views: %w", err)
			}
			s.Views = append(s.Views, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode stories.storyViewsList#fb3f77ac: field users: %w", err)
		}

		if headerLen > 0 {
			s.Users = make([]UserClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode stories.storyViewsList#fb3f77ac: field users: %w", err)
			}
			s.Users = append(s.Users, value)
		}
	}
	return nil
}

// GetCount returns value of Count field.
func (s *StoriesStoryViewsList) GetCount() (value int) {
	if s == nil {
		return
	}
	return s.Count
}

// GetViews returns value of Views field.
func (s *StoriesStoryViewsList) GetViews() (value []StoryView) {
	if s == nil {
		return
	}
	return s.Views
}

// GetUsers returns value of Users field.
func (s *StoriesStoryViewsList) GetUsers() (value []UserClass) {
	if s == nil {
		return
	}
	return s.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (s *StoriesStoryViewsList) MapUsers() (value UserClassArray) {
	return UserClassArray(s.Users)
}
