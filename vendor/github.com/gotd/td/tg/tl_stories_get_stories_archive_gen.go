// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoriesGetStoriesArchiveRequest represents TL type `stories.getStoriesArchive#1f5bc5d2`.
//
// See https://core.telegram.org/method/stories.getStoriesArchive for reference.
type StoriesGetStoriesArchiveRequest struct {
	// OffsetID field of StoriesGetStoriesArchiveRequest.
	OffsetID int
	// Limit field of StoriesGetStoriesArchiveRequest.
	Limit int
}

// StoriesGetStoriesArchiveRequestTypeID is TL type id of StoriesGetStoriesArchiveRequest.
const StoriesGetStoriesArchiveRequestTypeID = 0x1f5bc5d2

// Ensuring interfaces in compile-time for StoriesGetStoriesArchiveRequest.
var (
	_ bin.Encoder     = &StoriesGetStoriesArchiveRequest{}
	_ bin.Decoder     = &StoriesGetStoriesArchiveRequest{}
	_ bin.BareEncoder = &StoriesGetStoriesArchiveRequest{}
	_ bin.BareDecoder = &StoriesGetStoriesArchiveRequest{}
)

func (g *StoriesGetStoriesArchiveRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.OffsetID == 0) {
		return false
	}
	if !(g.Limit == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *StoriesGetStoriesArchiveRequest) String() string {
	if g == nil {
		return "StoriesGetStoriesArchiveRequest(nil)"
	}
	type Alias StoriesGetStoriesArchiveRequest
	return fmt.Sprintf("StoriesGetStoriesArchiveRequest%+v", Alias(*g))
}

// FillFrom fills StoriesGetStoriesArchiveRequest from given interface.
func (g *StoriesGetStoriesArchiveRequest) FillFrom(from interface {
	GetOffsetID() (value int)
	GetLimit() (value int)
}) {
	g.OffsetID = from.GetOffsetID()
	g.Limit = from.GetLimit()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoriesGetStoriesArchiveRequest) TypeID() uint32 {
	return StoriesGetStoriesArchiveRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*StoriesGetStoriesArchiveRequest) TypeName() string {
	return "stories.getStoriesArchive"
}

// TypeInfo returns info about TL type.
func (g *StoriesGetStoriesArchiveRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stories.getStoriesArchive",
		ID:   StoriesGetStoriesArchiveRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "OffsetID",
			SchemaName: "offset_id",
		},
		{
			Name:       "Limit",
			SchemaName: "limit",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *StoriesGetStoriesArchiveRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode stories.getStoriesArchive#1f5bc5d2 as nil")
	}
	b.PutID(StoriesGetStoriesArchiveRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *StoriesGetStoriesArchiveRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode stories.getStoriesArchive#1f5bc5d2 as nil")
	}
	b.PutInt(g.OffsetID)
	b.PutInt(g.Limit)
	return nil
}

// Decode implements bin.Decoder.
func (g *StoriesGetStoriesArchiveRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode stories.getStoriesArchive#1f5bc5d2 to nil")
	}
	if err := b.ConsumeID(StoriesGetStoriesArchiveRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode stories.getStoriesArchive#1f5bc5d2: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *StoriesGetStoriesArchiveRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode stories.getStoriesArchive#1f5bc5d2 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.getStoriesArchive#1f5bc5d2: field offset_id: %w", err)
		}
		g.OffsetID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stories.getStoriesArchive#1f5bc5d2: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// GetOffsetID returns value of OffsetID field.
func (g *StoriesGetStoriesArchiveRequest) GetOffsetID() (value int) {
	if g == nil {
		return
	}
	return g.OffsetID
}

// GetLimit returns value of Limit field.
func (g *StoriesGetStoriesArchiveRequest) GetLimit() (value int) {
	if g == nil {
		return
	}
	return g.Limit
}

// StoriesGetStoriesArchive invokes method stories.getStoriesArchive#1f5bc5d2 returning error if any.
//
// See https://core.telegram.org/method/stories.getStoriesArchive for reference.
func (c *Client) StoriesGetStoriesArchive(ctx context.Context, request *StoriesGetStoriesArchiveRequest) (*StoriesStories, error) {
	var result StoriesStories

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
